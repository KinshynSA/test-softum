{"version":3,"file":"scripts.32785b89486e1a078595.js","mappings":"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","sources":["webpack://test-softum/./src/js/components/popup/index.js","webpack://test-softum/./src/js/utils/utils.js","webpack://test-softum/./src/js/components/cards/index.js","webpack://test-softum/./src/js/app.js"],"sourcesContent":["export default class Popup{\r\n    constructor({childs}){\r\n        this.createPopup(childs);\r\n        this.handleClicks();\r\n    }\r\n\r\n    handleClicks(){\r\n        this.container.addEventListener('click', (e) => {\r\n            if(!e.target.closest('.popup-click_item')) return;\r\n            let target = e.target.closest('.popup-click_item');\r\n            let action = target.getAttribute('action');\r\n        \r\n            const actions = {\r\n                remove: function(){\r\n                    this.removePopup(target);\r\n                },\r\n            };\r\n        \r\n            actions[action].call(this);\r\n        })    \r\n    }\r\n    \r\n    removePopup(target){\r\n        this.container.remove();\r\n        document.body.style.overflow = '';\r\n    }\r\n    \r\n    createPopup(childs){\r\n        this.container = document.createElement('div');\r\n        this.container.classList = 'popup_container';\r\n        this.container.innerHTML = `\r\n            <div class=\"popup_background popup-click_item\" action=\"remove\"></div>\r\n            <div class=\"popup_content\">\r\n                <div class=\"popup\"></div>\r\n            </div>\r\n        `\r\n    \r\n        if(childs){\r\n            let popup = this.container.querySelector('.popup');\r\n            childs.forEach(item => popup.append(item));\r\n        }\r\n    \r\n        document.body.style.overflow = 'hidden';\r\n        document.body.append(this.container);\r\n    }\r\n}","export function randomString(length) {\r\n    const chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n    let result = '';\r\n    for (let i = length; i > 0; --i) result += chars[Math.floor(Math.random() * chars.length)];\r\n    return result;\r\n}","import Popup from \"../popup\";\r\nimport { randomString } from \"../../utils/utils\";\r\n\r\nexport default class Cards{\r\n    constructor(){\r\n        this.cardsBlock = document.getElementById('cardsBlock');\r\n        this.cardsBodyInner = this.cardsBlock.querySelector('.cards_body_inner');\r\n        this.cards = [];\r\n        this.fillFlag = false;\r\n        this.loadSavedCards();\r\n        this.clearDeletedCards();\r\n        this.fillCardsBlockToScroll = this.fillCardsBlockToScroll();\r\n        this.handleClicks();\r\n        this.handleScrolls();\r\n        \r\n    }\r\n\r\n    loadSavedCards(){\r\n        if(localStorage.getItem('cards')){\r\n            this.cards = JSON.parse(localStorage.getItem('cards'));\r\n            this.cards.forEach(item => this.createCard(item));\r\n        };        \r\n    }\r\n\r\n    clearDeletedCards(){\r\n        localStorage.setItem('deletedCards',JSON.stringify([]));\r\n    }\r\n    \r\n    compareSizes(){\r\n        let cardsArr = this.cardsBlock.querySelectorAll('.card');\r\n        let cardsWidth = [...cardsArr].reduce((sum, item) => {\r\n            return sum + item.offsetWidth;\r\n        }, -16)\r\n        let cardsBodyWidth = this.cardsBlock.querySelector('.cards_body').clientWidth;\r\n    \r\n        if(cardsBodyWidth > cardsWidth){\r\n            this.cardsBodyInner.classList.remove('filled');\r\n        } else {\r\n            this.cardsBodyInner.classList.add('filled');\r\n        }\r\n    }\r\n\r\n    handleScrolls(){   \r\n        document.addEventListener('scroll', (e) => {\r\n            if(!this.fillFlag) return;\r\n            this.fillCardsBlockToScroll();\r\n        })\r\n\r\n        this.cardsBodyInner.addEventListener('scroll', (e) => {\r\n            if(!this.fillFlag) return;\r\n            this.fillCardsBlockToScroll();\r\n        })\r\n    }\r\n\r\n    handleClicks(){\r\n        this.cardsBlock.addEventListener('click', (e) => {\r\n            if(!e.target.closest('.click_item')) return;\r\n            let target = e.target.closest('.click_item');\r\n            let action = target.getAttribute('action');\r\n        \r\n            if(action !== 'fill'){\r\n                this.fillFlag = false;\r\n                this.cardsBlock.querySelector('.cards_header_button-fill').classList.remove('button-stuck');\r\n            }\r\n        \r\n            const actions = {\r\n                add: this.addCard,\r\n                remove: this.removeCard,\r\n                fill: function(){\r\n                    this.fillFlag = !this.fillFlag;\r\n                    if(this.fillFlag) this.fillCardsBlock();\r\n                    target.classList.toggle('button-stuck');\r\n                },\r\n                clear: function(){\r\n                    this.cards.forEach(item => this.saveDeletedCard(item));\r\n                    this.cards = [this.cards[0]];\r\n        \r\n                    this.cardsBlock.querySelectorAll('.card').forEach((item, i) => {\r\n                        if(i) item.remove()\r\n                    });\r\n                    this.cardsBodyInner.classList.remove('filled');\r\n        \r\n                    this.saveCards();\r\n                },\r\n                reestablish: function(){\r\n                    let id = target.getAttribute('id');\r\n                    this.reestablishDeletedCard(target,id);\r\n                },\r\n                history: function(){\r\n                    let deletedCards = JSON.parse(localStorage.getItem('deletedCards'));\r\n                    let deletedCardsItems = [];\r\n                    if(deletedCards.length){\r\n                        deletedCards.forEach(item => {                    \r\n                            let card = document.createElement('div');\r\n                            card.classList = 'card-modal';\r\n                            card.innerHTML = `\r\n                                <div class=\"card-modal_title\">${item.title}</div>\r\n                                <div class=\"card-modal_button button click_item\" action=\"reestablish\" id=\"${item.id}\">Восстановить</div>\r\n                            `\r\n                            deletedCardsItems.push(card);\r\n                        })\r\n        \r\n                        new Popup({ childs: deletedCardsItems });\r\n                    } else {                \r\n                        let content = document.createElement('div');\r\n                        content.classList = 'card-modal_content';\r\n                        content.textContent = `Удаленных карточек нет`;\r\n                        new Popup({ childs: [content] });\r\n                    }\r\n                },\r\n                deleteThis: function(){\r\n                    let card = target.closest('.card');\r\n                    let id = +card.dataset.id;\r\n                    card.remove();\r\n        \r\n                    this.cards = this.cards.filter(item => {\r\n                        if(item.id !== id){\r\n                            return true;  \r\n                        } else {\r\n                            this.saveDeletedCard(item);\r\n                        }\r\n                    }); \r\n        \r\n                    this.saveCards();\r\n                },\r\n                openModal: function(){\r\n                    let card = target.closest('.card');\r\n                    let id = +card.dataset.id;\r\n                    let modalText;\r\n                    this.cards.forEach(item => {\r\n                        if(item.id === id){\r\n                            modalText = item.modalText;\r\n                        }\r\n                    })\r\n        \r\n                    let content = document.createElement('div');\r\n                    content.classList = 'card-modal_content';\r\n                    content.textContent = `Случайный контент: ${modalText}`;\r\n                    new Popup({ childs: [content] });\r\n                },\r\n            };\r\n        \r\n            actions[action].call(this);\r\n        });\r\n    }\r\n    \r\n    fillCardsBlock(){\r\n        let cardsArr = this.cardsBodyInner.querySelectorAll('.card');\r\n        if(!cardsArr.length){\r\n            this.addCard()\r\n        }\r\n        cardsArr = this.cardsBodyInner.querySelectorAll('.card');\r\n        let lastCard = cardsArr[cardsArr.length - 1];\r\n    \r\n        if(document.documentElement.clientWidth > 768){\r\n            if(lastCard.getBoundingClientRect().top < document.documentElement.clientHeight){\r\n                this.addCard();\r\n                this.fillCardsBlock();\r\n            } else {\r\n                this.removeCard(false);\r\n            }\r\n        } else {\r\n            if(lastCard.getBoundingClientRect().left < document.documentElement.clientWidth){\r\n                this.addCard();\r\n                this.fillCardsBlock();\r\n            }\r\n        }\r\n    }\r\n    \r\n    addCard(params = {}){\r\n        let {id,title,text,modalText} = params;\r\n        id = id ?? Date.now();\r\n        title = title ?? randomString(Math.floor(Math.random() * 20) + 1);\r\n        text = text ?? randomString(Math.floor(Math.random() * 20) + 1);\r\n        modalText = modalText ?? randomString(Math.floor(Math.random() * 20) + 1);\r\n        let obj = {\r\n            id,\r\n            title,\r\n            text,\r\n            modalText,\r\n        };\r\n    \r\n        this.cards.push(obj);\r\n        this.createCard(obj);\r\n        this.saveCards();\r\n    }\r\n    \r\n    createCard(params){\r\n        let card = document.createElement('div');\r\n        card.classList = 'card';\r\n        card.dataset.id = params.id;\r\n        card.innerHTML = `\r\n            <div class=\"card_inner\">\r\n                <div class=\"card_close click_item\" action=\"deleteThis\"></div>\r\n                <h3 class=\"card_title\">${params.title}</h3>\r\n                <p>${params.text}</p>\r\n                <button class=\"button card_button click_item\" action=\"openModal\">Modal</button>\r\n            </div>\r\n        `\r\n    \r\n        this.cardsBodyInner.append(card); \r\n        this.compareSizes();\r\n    }\r\n    \r\n    removeCard(saveFlag = true){\r\n        let card = this.cards.pop();\r\n        \r\n        let cardsArr = this.cardsBlock.querySelectorAll('.card');\r\n        cardsArr[cardsArr.length - 1].remove();\r\n    \r\n        this.saveCards();\r\n        if(saveFlag) this.saveDeletedCard(card);\r\n    }\r\n\r\n    saveCards(){\r\n        localStorage.setItem('cards',JSON.stringify(this.cards))\r\n    }\r\n\r\n    saveDeletedCard(card){\r\n        let deletedCards = JSON.parse(localStorage.getItem('deletedCards'));\r\n        deletedCards.push(card);\r\n        localStorage.setItem('deletedCards',JSON.stringify(deletedCards));\r\n    }\r\n\r\n    fillCardsBlockToScroll(){\r\n        let pageYOffset = 0;\r\n        const isMobile = document.documentElement.clientWidth <= 768;\r\n    \r\n        return () => {\r\n            if(isMobile){\r\n                this.fillCardsBlock();            \r\n            } else {\r\n                if(window.pageYOffset > pageYOffset){\r\n                    this.fillCardsBlock();\r\n                    pageYOffset = window.pageYOffset; \r\n                }             \r\n            }\r\n        }    \r\n    }\r\n\r\n    reestablishDeletedCard(target,id){\r\n        let card;\r\n        let deletedCards = JSON.parse(localStorage.getItem('deletedCards'));\r\n        let index = deletedCards.findIndex(item => item.id === id);\r\n        card = deletedCards[index];\r\n        deletedCards.splice(index,1);\r\n        localStorage.setItem('deletedCards',JSON.stringify(deletedCards));\r\n        addCard({...card});\r\n        let popup = target.closest('.popup');\r\n        target.closest('.card-modal').remove();\r\n        if(!popup.querySelectorAll('.card-modal').length){\r\n            this.removePopup(popup);\r\n        }\r\n    }\r\n}","import \"../assets/scss/app.scss\";\r\nimport Cards from \"./components/cards\";\r\n\r\n\r\nexport default function App(){\r\n    new Cards();\r\n}"],"names":["Popup","childs","this","createPopup","handleClicks","container","addEventListener","e","target","closest","remove","removePopup","getAttribute","call","document","body","style","overflow","createElement","classList","innerHTML","popup","querySelector","forEach","item","append","randomString","length","chars","result","i","Math","floor","random","Cards","cardsBlock","getElementById","cardsBodyInner","cards","fillFlag","loadSavedCards","clearDeletedCards","fillCardsBlockToScroll","handleScrolls","localStorage","getItem","JSON","parse","createCard","setItem","stringify","cardsWidth","querySelectorAll","reduce","sum","offsetWidth","clientWidth","add","action","addCard","removeCard","fill","fillCardsBlock","toggle","clear","saveDeletedCard","saveCards","reestablish","id","reestablishDeletedCard","history","deletedCards","deletedCardsItems","card","title","push","content","textContent","deleteThis","dataset","filter","openModal","modalText","cardsArr","lastCard","documentElement","getBoundingClientRect","top","clientHeight","left","params","text","obj","Date","now","compareSizes","saveFlag","pop","pageYOffset","isMobile","window","index","findIndex","splice"],"sourceRoot":""}